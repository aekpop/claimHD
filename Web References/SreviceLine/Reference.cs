//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ClaimProject.SreviceLine {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService_ServerSoap", Namespace="http://tempuri.org/")]
    public partial class WebService_Server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback MessageLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback MessageToServerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService_Server() {
            this.Url = global::ClaimProject.Properties.Settings.Default.ClaimProject_SreviceLine_WebService_Server;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event MessageLineCompletedEventHandler MessageLineCompleted;
        
        /// <remarks/>
        public event MessageToServerCompletedEventHandler MessageToServerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld(string strMessage) {
            object[] results = this.Invoke("HelloWorld", new object[] {
                        strMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync(string strMessage) {
            this.HelloWorldAsync(strMessage, null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(string strMessage, object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[] {
                        strMessage}, this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MessageLine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MessageLine(string token, string msg, string pictureUrl, int stickerPackageID, int stickerID) {
            this.Invoke("MessageLine", new object[] {
                        token,
                        msg,
                        pictureUrl,
                        stickerPackageID,
                        stickerID});
        }
        
        /// <remarks/>
        public void MessageLineAsync(string token, string msg, string pictureUrl, int stickerPackageID, int stickerID) {
            this.MessageLineAsync(token, msg, pictureUrl, stickerPackageID, stickerID, null);
        }
        
        /// <remarks/>
        public void MessageLineAsync(string token, string msg, string pictureUrl, int stickerPackageID, int stickerID, object userState) {
            if ((this.MessageLineOperationCompleted == null)) {
                this.MessageLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMessageLineOperationCompleted);
            }
            this.InvokeAsync("MessageLine", new object[] {
                        token,
                        msg,
                        pictureUrl,
                        stickerPackageID,
                        stickerID}, this.MessageLineOperationCompleted, userState);
        }
        
        private void OnMessageLineOperationCompleted(object arg) {
            if ((this.MessageLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MessageLineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MessageToServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MessageToServer(string token, string msg, string pictureUrl, int stickerPackageID, int stickerID) {
            this.Invoke("MessageToServer", new object[] {
                        token,
                        msg,
                        pictureUrl,
                        stickerPackageID,
                        stickerID});
        }
        
        /// <remarks/>
        public void MessageToServerAsync(string token, string msg, string pictureUrl, int stickerPackageID, int stickerID) {
            this.MessageToServerAsync(token, msg, pictureUrl, stickerPackageID, stickerID, null);
        }
        
        /// <remarks/>
        public void MessageToServerAsync(string token, string msg, string pictureUrl, int stickerPackageID, int stickerID, object userState) {
            if ((this.MessageToServerOperationCompleted == null)) {
                this.MessageToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMessageToServerOperationCompleted);
            }
            this.InvokeAsync("MessageToServer", new object[] {
                        token,
                        msg,
                        pictureUrl,
                        stickerPackageID,
                        stickerID}, this.MessageToServerOperationCompleted, userState);
        }
        
        private void OnMessageToServerOperationCompleted(object arg) {
            if ((this.MessageToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MessageToServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void MessageLineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void MessageToServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591